-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParBNF where
import AbsBNF
import LexBNF
import ErrM

}

%name pTreeLex TreeLex
%name pListTreeLex ListTreeLex
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  ',' { PT _ (TS _ 1) }
  '<' { PT _ (TS _ 2) }
  '>' { PT _ (TS _ 3) }

L_integ  { PT _ (TI $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

TreeLex :: { TreeLex }
TreeLex : Integer '<' ListTreeLex '>' { AbsBNF.TreeL $1 $3 }
        | Integer { AbsBNF.LeafL $1 }
ListTreeLex :: { [TreeLex] }
ListTreeLex : TreeLex { (:[]) $1 }
            | TreeLex ',' ListTreeLex { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

