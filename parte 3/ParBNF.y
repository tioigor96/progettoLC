-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParBNF where
import AbsBNF
import LexBNF
import ErrM

}

%name pTreeLexD TreeLexD
%name pListTreeLexD ListTreeLexD
%name pTreeLexI TreeLexI
%name pListTreeLexI ListTreeLexI
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }

L_doubl  { PT _ (TD $$) }
L_integ  { PT _ (TI $$) }


%%

Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

TreeLexD :: { TreeLexD }
TreeLexD : Double Integer '(' ListTreeLexD ')' { AbsBNF.TreeD $1 $2 $4 }
         | Double Integer { AbsBNF.LeafD $1 $2 }
ListTreeLexD :: { [TreeLexD] }
ListTreeLexD : TreeLexD { (:[]) $1 }
             | TreeLexD ListTreeLexD { (:) $1 $2 }
TreeLexI :: { TreeLexI }
TreeLexI : Integer Integer '(' ListTreeLexI ')' { AbsBNF.TreeI $1 $2 $4 }
         | Integer Integer { AbsBNF.LeafI $1 $2 }
ListTreeLexI :: { [TreeLexI] }
ListTreeLexI : TreeLexI { (:[]) $1 }
             | TreeLexI ListTreeLexI { (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

