comment "--";

Prog.          Program ::= Block;

-----------
--BLOCCHI--
-----------

-- suddividere statement e funzioni
Blk.           Block ::=  [Statement]  ;
BlkDiv.        Block ::= [Statement] DivStm [Statement] ;

--il ; è opzionale, si può mettere uno spazio o un a capo
separator Statement "";
token DivStm ('\n'|';');

rules BasicType ::= "Bool" | "Char" | "Float" | "Int" | "String" | "Void" ;
rules Boolean ::= "true" | "false";
rules Modality ::= {-empty-} | "val" | "ref";
-- da gestire in futuro EVENTUALMENTE
-- | "const" | "res" | "valres" | "name" ;

------------
--GESTIONE TIPI--
-------------

BasTyp.     Type ::= BasicType ;

CompType.   Type ::= CompoundType ;
ArrDef.     CompoundType ::= Type "[" Integer "]" ;
ArrUnDef.   CompoundType ::= Type "["  "]" ;
PType.      CompoundType ::= Type "*" ;

------------
--STATEMENT-
------------

Stm.           Statement ::= LExp "=" RExp;
StmWhile.      Statement ::= While;
StmRepeat.     Statement ::= Repeat;
StmIf.         Statement ::= If;
Procedure.     Statement ::= Func;
FunctWrite.    Statement ::= FuncWrite;
FunctRead.     Statement ::= FuncRead;
FDecl.         Statement ::= FuncDecl;


InsideFuncStm.           IFuncStatement ::= LExp "=" RExp;
InsideFuncStmWhile.      IFuncStatement ::= While;
InsideFuncStmRepeat.     IFuncStatement ::= Repeat;
InsideFuncStmIf.         IFuncStatement ::= If;
InsideFuncProcedure.     IFuncStatement ::= Func;
InsideFuncFunctWrite.    IFuncStatement ::= FuncWrite;
InsideFuncFunctRead.     IFuncStatement ::= FuncRead;


WriteI.    FuncWrite ::= "writeInt" "(" Integer ")";
WriteF.    FuncWrite ::= "writeFloat" "(" Double ")";
WriteC.    FuncWrite ::= "writeChar" "(" Char ")";
WriteS.    FuncWrite ::= "writeString" "(" String ")";

ReadI.     FuncRead ::= "readInt" "(" Integer ")";
ReadF.     FuncRead ::= "readFloat" "(" Double ")";
ReadC.     FuncRead ::= "readChar" "(" Char ")";
ReadS.     FuncRead ::= "readString" "(" String ")";


-------------
----LEXP-----
-------------

Pointer.     LExp ::= "*" BLEx;
BasicLExp.   LExp ::= BLEx;

ArrayEl.      BLEx ::= BLEx "[" RExp "]" ;
ArrDecl.      BLEx ::= CompoundType NameVar;
NewVariable.  BLEx ::= BasicType NameVar;
OldVariable.  BLEx ::= NameVar;


token NameVar (letter|'_'lower)(letter|digit|'_')*;


------------
--FUNCTIONS && PARAMETERS-
------------
FunctionCall.   Func ::= NameVar "(" [RExp] ")";
separator RExp ",";

FunctionDeclaration. FuncDecl ::= BasicType "function" NameVar "(" [Parameters] ")" [FuncStatement] "end";


ParamBasic.      Parameters ::= Modality Type NameVar;

separator Parameters ",";

NormalStmt.      FuncStatement ::= IFuncStatement;
RVar.            FuncStatement ::= "return" RExp;

separator FuncStatement "";




-----------
---CONTROLLO FLUSSO---
-----------

LoopW.         While ::= "while" RExp "do" Block "end";
LoopR.         Repeat ::= "repeat" RExp "until" RExp;
LoopIfElse.    If ::= "if" RExp "then" Block [Elseif] Else "end";
LoopIf.        If ::= "if" RExp "then" Block [Elseif]  "end";
ElseV.         Else ::= "else" Block;

ElseifList.    Elseif ::= "elseif" RExp "then" Block;

separator Elseif "";

--------------
--RIGHT EXPRESSIONS-
--------------


Or.         RExp ::= RExp "or" RExp1;
And.        RExp ::= RExp1 "and" RExp2;
Not.        RExp2 ::= "not" RExp3;

Eq.         RExp4 ::= RExp4 "==" RExp5;
Neq.        RExp4 ::= RExp4 "!=" RExp5;
Lt.         RExp4 ::= RExp4 "<"  RExp5;
LtE.        RExp4 ::= RExp4 "<=" RExp5;
Gt.         RExp4 ::= RExp4 ">"  RExp5;
GtE.        RExp4 ::= RExp4 ">=" RExp5;

Add.        RExp6 ::= RExp6 "+" RExp7;
Sub.        RExp6 ::= RExp6 "-" RExp7;

MulOps.     RExp7 ::= RExp7 MulOp RExp8;


Pow.        RExp8 ::= RExp9 "^" RExp8 ;

Neg.        RExp9 ::= "-" RExp10 ;
FCall.      RExp10 ::= Func;

ValInt.        RExp11 ::= Integer;
ValVariable.   RExp11 ::= NameVar;
ValDouble.     RExp11 ::= Double;
ValString.     RExp11 ::= String;
ValChar.       RExp11 ::= Char;
ValBoolean.    RExp11 ::= Boolean;
ValArr.        RExp12 ::= MultiDimensionalArray;




token MulOp ('*'|'/'|'%');

coercions RExp 12;

-------------
----ARRAY----
-------------

separator nonempty ElementI ",";
separator  nonempty ElementD ",";
separator  nonempty ElementS ",";
separator  nonempty ElementC ",";
separator  nonempty ElementB ",";

separator nonempty ArrayI ",";
separator  nonempty ArrayD ",";
separator  nonempty ArrayS ",";
separator  nonempty ArrayC ",";
separator  nonempty ArrayB ",";




--separator MyArray ",";

ElmntI.       ElementI ::= Integer;
ElmntD.       ElementD ::= Double;
ElmntS.       ElementS ::= String;
ElmntC.       ElementC ::= Char;
ElmntB.       ElementB ::= Boolean;
ElmntE.       ElementE ::= {-empty-};


-- rules MyArray ::=   ArrayI  |  ArrayD  |  ArrayB  |  ArrayC   |  ArrayS  | ArrayE ;

rules MultiDimensionalArray ::=  MArrayI | MArrayD | MArrayB | MArrayC | MArrayS | ArrayE;
MArri.        MArrayI ::= [ArrayI];
MArrD.        MArrayD ::= [ArrayD];
MArrB.        MArrayB ::= [ArrayB];
MArrC.        MArrayC ::= [ArrayC];
MArrS.        MArrayS ::= [ArrayS];


ArrI.         ArrayI ::= "{" [ElementI] "}";
ArrD.         ArrayD ::= "{" [ElementD] "}";
ArrC.         ArrayC ::= "{" [ElementC] "}";
ArrS.         ArrayS ::= "{" [ElementS] "}";
ArrB.         ArrayB ::= "{" [ElementB] "}";


ArrE.         ArrayE ::= ElementE;

--manca array multi dimensionale