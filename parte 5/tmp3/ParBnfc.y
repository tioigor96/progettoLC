-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParBnfc where
import AbsBnfc
import LexBnfc
import ErrM
import Utils
import Data.Maybe
import Env

}

%name pProgram Program
%name pListPGlobl ListPGlobl
%name pPGlobl PGlobl
%name pBlock Block
%name pListStm ListStm
%name pBasicType BasicType
%name pBoolean Boolean
%name pPtrVoid PtrVoid
%name pStm Stm
%name pEBlk EBlk
%name pDecl Decl
%name pVarInit VarInit
%name pLocal Local
%name pAss Ass
%name pFunc Func
%name pFuncWrite FuncWrite
%name pFuncRead FuncRead
%name pWhile While
%name pRepeat Repeat
%name pFor For
%name pIncrement Increment
%name pIf If
%name pElse Else
%name pElseIf ElseIf
%name pListElseIf ListElseIf
%name pReturn Return
%name pRValue RValue
%name pBreak Break
%name pListRExp ListRExp
%name pFuncD FuncD
%name pParamF ParamF
%name pListParamF ListParamF
%name pModality Modality
%name pLExp LExp
%name pListDim ListDim
%name pDim Dim
%name pRExp RExp
%name pRExp2 RExp2
%name pRExp3 RExp3
%name pRExp6 RExp6
%name pRExp7 RExp7
%name pRExp8 RExp8
%name pRExp9 RExp9
%name pRExp10 RExp10
%name pRExp11 RExp11
%name pRExp12 RExp12
%name pArray Array
%name pVType VType
%name pListVType ListVType
%name pRExp1 RExp1
%name pRExp4 RExp4
%name pRExp5 RExp5
%name pRExp13 RExp13
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '#' { PT _ (TS _ 1) }
  '%' { PT _ (TS _ 2) }
  '&' { PT _ (TS _ 3) }
  '(' { PT _ (TS _ 4) }
  ')' { PT _ (TS _ 5) }
  '*' { PT _ (TS _ 6) }
  '+' { PT _ (TS _ 7) }
  ',' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '..' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '==' { PT _ (TS _ 16) }
  '>' { PT _ (TS _ 17) }
  '>=' { PT _ (TS _ 18) }
  'Bool' { PT _ (TS _ 19) }
  'Char' { PT _ (TS _ 20) }
  'Float' { PT _ (TS _ 21) }
  'Int' { PT _ (TS _ 22) }
  'String' { PT _ (TS _ 23) }
  'Void' { PT _ (TS _ 24) }
  '[' { PT _ (TS _ 25) }
  ']' { PT _ (TS _ 26) }
  '^' { PT _ (TS _ 27) }
  'and' { PT _ (TS _ 28) }
  'break' { PT _ (TS _ 29) }
  'const' { PT _ (TS _ 30) }
  'do' { PT _ (TS _ 31) }
  'else' { PT _ (TS _ 32) }
  'elseif' { PT _ (TS _ 33) }
  'end' { PT _ (TS _ 34) }
  'false' { PT _ (TS _ 35) }
  'for' { PT _ (TS _ 36) }
  'function' { PT _ (TS _ 37) }
  'if' { PT _ (TS _ 38) }
  'in' { PT _ (TS _ 39) }
  'local' { PT _ (TS _ 40) }
  'name' { PT _ (TS _ 41) }
  'nil' { PT _ (TS _ 42) }
  'not' { PT _ (TS _ 43) }
  'or' { PT _ (TS _ 44) }
  'readChar' { PT _ (TS _ 45) }
  'readFloat' { PT _ (TS _ 46) }
  'readInt' { PT _ (TS _ 47) }
  'readString' { PT _ (TS _ 48) }
  'ref' { PT _ (TS _ 49) }
  'repeat' { PT _ (TS _ 50) }
  'res' { PT _ (TS _ 51) }
  'return' { PT _ (TS _ 52) }
  'then' { PT _ (TS _ 53) }
  'true' { PT _ (TS _ 54) }
  'until' { PT _ (TS _ 55) }
  'val' { PT _ (TS _ 56) }
  'valres' { PT _ (TS _ 57) }
  'while' { PT _ (TS _ 58) }
  'writeChar' { PT _ (TS _ 59) }
  'writeFloat' { PT _ (TS _ 60) }
  'writeInt' { PT _ (TS _ 61) }
  'writeString' { PT _ (TS _ 62) }
  '{' { PT _ (TS _ 63) }
  '}' { PT _ (TS _ 64) }
  '~=' { PT _ (TS _ 65) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_charac { PT _ (TC $$) }
L_LIdent { PT _ (T_LIdent _) }

-- tipi per gli attributi di $$
%attributetype { AttrTree a }
%attribute res { Result }
%attribute parsetree { a }
%attribute vint { Integer }
%attribute vdbl { Double }
%attribute vchr { Char }
%attribute vstr { String }
%attribute vlident { LIdent }

-- attributi per il frontend
%attribute envin { EnvT }
%attribute envout { EnvT }
%attribute errs { [String] }
%attribute posn { Posn }


%%

Integer : L_integ  { $$.vint = (read ( $1)) :: Integer }

Double : L_doubl  {  $$.vdbl = (read ( $1)) :: Double }

String : L_quoted { $$.vstr = $1 }

Char : L_charac {  $$.vchr = (read ( $1)) :: Char }

LIdent : L_LIdent 
{         
            $$.posn =  (tokenPosn $1)                           
            ; $$.vlident = LIdent (getLIdentT $1)
        }

Program : ListPGlobl
    { 
        $1.envin = emptyEnv
        ; $$.res = Result (AbsBnfc.Prog $1.parsetree ) "qui TAC" $1.envout $1.errs
    }

ListPGlobl : PGlobl 
    { 
        $1.envin = $$.envin
        ; $$.parsetree = (:[]) $1.parsetree
        ; $$.envout = $1.envout
        ; $$.errs = $1.errs
    } 
    | PGlobl ListPGlobl
    { 
        $1.envin = $$.envin
        ; $2.envin = $1.envout
        ; $$.parsetree = (:) $1.parsetree $2.parsetree
        ; $$.envout = mergeEnv $1.envout $2.envout
        ; $$.errs = $1.errs ++ $2.errs
        
    }

PGlobl : Stm 
    { 
        $1.envin = $$.envin
        ; $$.parsetree = AbsBnfc.ProgGlobB $1.parsetree
        ; $$.envout = $1.envout 
        ; $$.errs = $1.errs
    }
       | FuncD 
    { 
        $$.parsetree = AbsBnfc.ProgGlobF $1.parsetree
        ; $1.envin = $$.envin 
        ; $$.envout = $1.envout 
        ; $$.errs = $1.errs
    }

Block : ListStm 
    { 
        $$.parsetree = AbsBnfc.Blk $1.parsetree 
    }

ListStm : Stm 
    { 
        $$.parsetree = (:[]) $1.parsetree 
    } 
    | Stm ListStm 
    { 
        $$.parsetree = (:) $1.parsetree $2.parsetree
    }

BasicType : 'Bool' 
    { 
        $$.parsetree = AbsBnfc.BasicType_Bool 
    }
    | 'Char' 
    { 
        $$.parsetree = AbsBnfc.BasicType_Char 
    }
    | 'Float' 
    { 
        $$.parsetree = AbsBnfc.BasicType_Float 
    }
    | 'Int' 
    { 
        $$.parsetree = AbsBnfc.BasicType_Int 
    }
    | 'String' 
    { 
        $$.parsetree = AbsBnfc.BasicType_String 
    }
    | 'Void' 
    { 
        $$.parsetree = AbsBnfc.BasicType_Void 
    }

Boolean : 'true' { $$.parsetree = AbsBnfc.Boolean_true }
        | 'false' { $$.parsetree = AbsBnfc.Boolean_false }

PtrVoid : 'nil' { $$.parsetree = AbsBnfc.PtrType }

Stm : Decl ';' 
    { 
        $1.envin = $$.envin
        ; $$.parsetree = AbsBnfc.SDecl $1.parsetree
        ; $$.envout = $1.envout
        ; $$.errs = $1.errs
    }
    | Local ';' 
    { 
        $$.parsetree = AbsBnfc.SLocal $1.parsetree 
    }
    | Ass ';' 
    { 
        $$.parsetree = AbsBnfc.SAss $1.parsetree 
    }
    | While 
    { 
        $$.parsetree = AbsBnfc.SWhile $1.parsetree 
    }
    | Repeat ';' 
    { 
        $$.parsetree = AbsBnfc.SRepeat $1.parsetree 
    }
    | For 
    { 
        $$.parsetree = AbsBnfc.SFor $1.parsetree 
    }
    | If 
    { 
        $$.parsetree = AbsBnfc.SIf $1.parsetree 
    }
    | RExp ';' 
    { 
        $$.parsetree = AbsBnfc.SRExp $1.parsetree 
    }
    | EBlk 
    { 
        $$.parsetree = AbsBnfc.SEBlk $1.parsetree 
    }
    | Return ';' 
    { 
        $$.parsetree = AbsBnfc.SReturn $1.parsetree 
    }
    | Break ';' 
    { 
        $$.parsetree = AbsBnfc.SBreak $1.parsetree
    }

EBlk : 'do' Block 'end' 
    { 
        $$.parsetree = AbsBnfc.EBlkS $2.parsetree 
    }

-- passa a VarInit env e varie
Decl : BasicType LExp VarInit 
    { 
        $3.envin = $$.envin
        ; $$.parsetree = AbsBnfc.DeclSP $1.parsetree $2.parsetree $3.parsetree
        ; $$.envout = ( if (isOk (insertEnv $1.parsetree $2.parsetree $$.envin $2.posn))
                         then (fromOk (insertEnv $1.parsetree $2.parsetree $$.envin $2.posn))
                         else $3.envin
                        )
        ; $$.errs = ( if (isJust (lookupEnv ( (fromLIdent . getLIdentlexp) $2.parsetree) $$.envin))
                         then ["error: variable " ++ (fromBad (insertEnv $1.parsetree $2.parsetree $$.envin $2.posn))]
                         else []
                        ) ++ $3.errs
                            
    }

VarInit : {- empty -} 
    { 
        
        $$.parsetree = AbsBnfc.VarINil
        ; $$.envout = $$.envin
        ; $$.errs = []
    }
    | '=' RExp 
    {
        $$.parsetree = AbsBnfc.VarExp $2.parsetree 
        ; $$.envout = $$.envin
        ; $$.errs = []
    }

Local : 'local' Decl 
    { 
        $$.parsetree = AbsBnfc.DeclLocal $2.parsetree 
    }

Ass : LExp '=' RExp 
    { 
        $$.parsetree = AbsBnfc.AssD $1.parsetree $3.parsetree 
    }

Func : FuncWrite 
    { 
        $$.parsetree = AbsBnfc.FuncBW $1.parsetree 
    }
    | FuncRead 
    { 
        $$.parsetree = AbsBnfc.FuncBR $1.parsetree 
    }
    | LIdent '(' ListRExp ')' --modded
    { 
        $$.parsetree = AbsBnfc.FnctCall $1.vlident $3.parsetree 
    }

FuncWrite : 'writeInt' '(' RExp ')' 
    { 
        $$.parsetree = AbsBnfc.WriteI $3.parsetree 
    }
    | 'writeFloat' '(' RExp ')' 
    { 
        $$.parsetree = AbsBnfc.WriteF $3.parsetree 
    }
    | 'writeChar' '(' RExp ')' 
    { 
        $$.parsetree = AbsBnfc.WriteC $3.parsetree 
    }
    | 'writeString' '(' RExp ')' 
    { 
        $$.parsetree = AbsBnfc.WriteS $3.parsetree 
    }

FuncRead : 'readInt' '(' ')' 
    { 
        $$.parsetree = AbsBnfc.ReadI 
    }
    | 'readFloat' '(' ')' 
    { 
        $$.parsetree = AbsBnfc.ReadF 
    }
    | 'readChar' '(' ')' 
    { 
        $$.parsetree = AbsBnfc.ReadC 
    }
    | 'readString' '(' ')' 
    { 
        $$.parsetree = AbsBnfc.ReadS 
    }

While : 'while' RExp 'do' Block 'end' 
    { 
        $$.parsetree = AbsBnfc.LoopW $2.parsetree $4.parsetree 
    }

Repeat : 'repeat' Block 'until' RExp 
    { 
        $$.parsetree = AbsBnfc.LoopR $2.parsetree $4.parsetree 
    }

For : 'for' LIdent '=' RExp ',' RExp Increment 'do' Block 'end' --modded
    { 
        $$.parsetree = AbsBnfc.LoopF $2.vlident $4.parsetree $6.parsetree $7.parsetree $9.parsetree 
    }
    | 'for' LIdent 'in' LIdent 'do' Block 'end' --modded
    { 
        $$.parsetree = AbsBnfc.LoopFE $2.vlident $4.vlident $6.parsetree 
    }

Increment : {- empty -} -- per l'appunto, assumiamo sia 1 l'incremento
    { 
        $$.parsetree = AbsBnfc.FInc ( AbsBnfc.ValInt 1 )
    }
    | ',' RExp 
    { 
        $$.parsetree = AbsBnfc.FInc $2.parsetree 
    }

If : 'if' RExp 'then' Block ListElseIf Else 'end' --occhio al $5
    { 
        $$.parsetree = AbsBnfc.IfM $2.parsetree $4.parsetree (reverse $5.parsetree) $6.parsetree    
    }

Else : 'else' Block 
    { 
        $$.parsetree = AbsBnfc.ElseS $2.parsetree 
    }
    | {- empty -} 
    { 
        $$.parsetree = AbsBnfc.ElseE 
    }

ElseIf : 'elseif' RExp 'then' Block 
    { 
        $$.parsetree = AbsBnfc.ElseIfD $2.parsetree $4.parsetree 
    }

ListElseIf : {- empty -} 
    { 
        $$.parsetree = [] 
    }
    | ListElseIf ElseIf 
    { 
        $$.parsetree = flip (:) $1.parsetree $2.parsetree 
    }

Return : 'return' RValue 
    { 
        $$.parsetree = AbsBnfc.JumpR $2.parsetree 
    }

RValue : {- empty -} 
    { 
        $$.parsetree = AbsBnfc.JumpRE 
    }
    | RExp 
    { 
        $$.parsetree = AbsBnfc.JumpRV $1.parsetree 
    }

Break : 'break' 
    { 
        $$.parsetree = AbsBnfc.JumpB 
    }

ListRExp : {- empty -} 
    { 
        $$.parsetree = [] 
    }
    | RExp 
    { 
        $$.parsetree = (:[]) $1.parsetree 
    }
    | RExp ',' ListRExp 
    { 
        $$.parsetree = (:) $1.parsetree $3.parsetree 
    }

FuncD : BasicType 'function' LIdent '(' ListParamF ')' Block 'end' --modded
    { 
        $$.parsetree = AbsBnfc.FnctDecl $1.parsetree $3.vlident $5.parsetree $7.parsetree 
    }

ParamF : Modality BasicType LExp 
    { 
        $$.parsetree = AbsBnfc.ParmDeclF $1.parsetree $2.parsetree $3.parsetree 
    }

ListParamF : {- empty -} 
    { 
        $$.parsetree = [] 
    }
    | ParamF 
    { 
        $$.parsetree = (:[]) $1.parsetree 
    }
    | ParamF ',' ListParamF 
    { 
        $$.parsetree = (:) $1.parsetree $3.parsetree 
    }

Modality : {- empty -} 
    { 
        $$.parsetree = AbsBnfc.Modality1 
    }
    | 'val' 
    { 
        $$.parsetree = AbsBnfc.Modality_val
    }
    | 'ref' 
    { 
        $$.parsetree = AbsBnfc.Modality_ref 
    }
    | 'const' 
    { 
        $$.parsetree = AbsBnfc.Modality_const 
    }
    | 'res' 
    { 
        $$.parsetree = AbsBnfc.Modality_res 
    }
    | 'valres' 
    { 
        $$.parsetree = AbsBnfc.Modality_valres 
    }
    | 'name' 
    { 
        $$.parsetree = AbsBnfc.Modality_name 
    }

LExp : LIdent --modded
    { 
        $$.parsetree = AbsBnfc.LExpS $1.vlident
        ; $$.posn = $1.posn
    }
    | '*' LExp 
    { 
        $$.parsetree = AbsBnfc.LExpDR $2.parsetree 
        ; $$.posn = $2.posn
    }
    | LIdent ListDim --modded
    { 
        $$.parsetree = AbsBnfc.LExpA $1.vlident $2.parsetree
        ; $$.posn = $1.posn
    }

ListDim : Dim 
    { 
        $$.parsetree = (:[]) $1.parsetree 
    } 
    | Dim ListDim 
    { 
        $$.parsetree = (:) $1.parsetree $2.parsetree 
    }

Dim : '[' Integer ']' --modded
    { 
        $$.parsetree = AbsBnfc.Dims $2.vint 
    }

RExp : RExp 'or' RExp1 
    { 
        $$.parsetree = AbsBnfc.Or $1.parsetree $3.parsetree 
    }
    | RExp1 'and' RExp2 
    { 
        $$.parsetree = AbsBnfc.And $1.parsetree $3.parsetree 
    }
    | RExp1 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp2 : 'not' RExp3 
    { 
        $$.parsetree = AbsBnfc.Not $2.parsetree 
    } 
    | RExp3 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp3 : RExp3 '==' RExp5 
    { 
        $$.parsetree = AbsBnfc.Eq $1.parsetree $3.parsetree 
    }
    | RExp3 '~=' RExp5 
    { 
        $$.parsetree = AbsBnfc.Neq $1.parsetree $3.parsetree 
    }
    | RExp3 '<' RExp5 
    { 
        $$.parsetree = AbsBnfc.Lt $1.parsetree $3.parsetree 
    }
    | RExp3 '<=' RExp5 
    { 
        $$.parsetree = AbsBnfc.LtE $1.parsetree $3.parsetree 
    }
    | RExp3 '>' RExp5 
    { 
        $$.parsetree = AbsBnfc.Gt $1.parsetree $3.parsetree 
    }
    | RExp3 '>=' RExp5 
    { 
        $$.parsetree = AbsBnfc.GtE $1.parsetree $3.parsetree 
    }
    | RExp4 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp6 : RExp6 '+' RExp7 
    { 
        $$.parsetree = AbsBnfc.Add $1.parsetree $3.parsetree 
    }
    | RExp6 '-' RExp7 
    { 
        $$.parsetree = AbsBnfc.Sub $1.parsetree $3.parsetree 
    }
    | RExp7 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp7 : RExp7 '*' RExp8 
    { 
        $$.parsetree = AbsBnfc.Mul $1.parsetree $3.parsetree 
    }
    | RExp7 '/' RExp8 
    {
        $$.parsetree = AbsBnfc.Div $1.parsetree $3.parsetree 
    }
    | RExp7 '%' RExp8 
    { 
        $$.parsetree = AbsBnfc.Rem $1.parsetree $3.parsetree 
    }
    | RExp8 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp8 : RExp9 '^' RExp8 
    { 
        $$.parsetree = AbsBnfc.Pow $1.parsetree $3.parsetree 
    } 
    | RExp9 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp9 : '-' RExp10 
    { 
        $$.parsetree = AbsBnfc.Neg $2.parsetree 
    } 
    | RExp10 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp10 : Func 
    { 
        $$.parsetree = AbsBnfc.FCall $1.parsetree 
    }
    | RExp10 '..' RExp11 
    { 
        $$.parsetree = AbsBnfc.FStrCnt $1.parsetree $3.parsetree 
    }
    | '#' RExp11 
    { 
        $$.parsetree = AbsBnfc.FLen $2.parsetree 
    }
    | RExp11 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp11 : Integer --modded
    { 
        $$.parsetree = AbsBnfc.ValInt $1.vint 
    }
    | LExp 
    { 
        $$.parsetree = AbsBnfc.ValVariable $1.parsetree 
    }
    | '&' LExp 
    { 
        $$.parsetree = AbsBnfc.ValRef $2.parsetree 
    }
    | Double --modded
    { 
        $$.parsetree = AbsBnfc.ValDouble $1.vdbl 
    }
    | String --modded
    { 
        $$.parsetree = AbsBnfc.ValString $1.vstr 
    }
    | Char --modded
    { 
        $$.parsetree = AbsBnfc.ValChar $1.vchr 
    }
    | Boolean 
    { 
        $$.parsetree = AbsBnfc.ValBoolean $1.parsetree 
    }
    | PtrVoid 
    { 
        $$.parsetree = AbsBnfc.ValPtr $1.parsetree 
    }
    | RExp12 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp12 : '{' Array '}' 
    { 
        $$.parsetree = AbsBnfc.ValMArr $2.parsetree 
    } 
    | RExp13 
    { 
        $$.parsetree = $1.parsetree 
    }

Array : '{' Array '}' ',' Array 
    { 
        $$.parsetree = AbsBnfc.ArrayV0 $2.parsetree $5.parsetree 
    }
    | '{' Array '}' 
    { 
        $$.parsetree = AbsBnfc.ArrayV1 $2.parsetree 
    }
    | ListVType 
    { 
        $$.parsetree = AbsBnfc.ArrayV2 $1.parsetree 
    }

VType : Boolean 
    { 
        $$.parsetree = AbsBnfc.VTypeBoolean $1.parsetree 
    }
    | Char --modded
    { 
        $$.parsetree = AbsBnfc.VTypeChar $1.vchr 
    }
    | Double --modded
    { 
        $$.parsetree = AbsBnfc.VTypeDouble $1.vdbl 
    }
    | Integer --modded
    { 
        $$.parsetree = AbsBnfc.VTypeInteger $1.vint
    }
    | String --modded
    { 
        $$.parsetree = AbsBnfc.VTypeString $1.vstr 
    }
    | PtrVoid 
    { 
        $$.parsetree = AbsBnfc.VTypePtrVoid $1.parsetree 
    }
    | {- empty -} 
    { 
        $$.parsetree = AbsBnfc.VType1 
    }

ListVType : VType 
    { 
        $$.parsetree = (:[]) $1.parsetree 
    } 
    | VType ',' ListVType 
    { 
        $$.parsetree = (:) $1.parsetree $3.parsetree 
    }

RExp1 : RExp2 
    { 
        $$.parsetree = $1.parsetree
    }

RExp4 : RExp5 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp5 : RExp6 
    { 
        $$.parsetree = $1.parsetree 
    }

RExp13 : '(' RExp ')' 
    { 
        $$.parsetree = $2.parsetree 
    }
{

data Result = Result Program String EnvT [String]  deriving (Eq, Show)


returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

