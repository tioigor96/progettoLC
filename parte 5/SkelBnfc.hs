module SkelBnfc where

-- Haskell module generated by the BNF converter

import AbsBnfc
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transDivStm :: DivStm -> Result
transDivStm x = case x of
  DivStm string -> failure x
transNameVar :: NameVar -> Result
transNameVar x = case x of
  NameVar string -> failure x
transBoolOp :: BoolOp -> Result
transBoolOp x = case x of
  BoolOp string -> failure x
transOperator :: Operator -> Result
transOperator x = case x of
  Operator string -> failure x
transLongStrings :: LongStrings -> Result
transLongStrings x = case x of
  LongStrings string -> failure x
transTable :: Table -> Result
transTable x = case x of
  Table string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog block -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Blk statements -> failure x
  BlkDiv statements1 divstm statements2 -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  Stm namevar value -> failure x
  StmArr namevar elements -> failure x
  StmTab namevar integer value -> failure x
  StmExp namevar exp -> failure x
  StmWhile while -> failure x
  StmRepeat repeat -> failure x
  StmIf if_ -> failure x
transWhile :: While -> Result
transWhile x = case x of
  LoopW boolexp block -> failure x
transRepeat :: Repeat -> Result
transRepeat x = case x of
  LoopR block boolexp -> failure x
transIf :: If -> Result
transIf x = case x of
  LoopIf boolexp block elseifs elses -> failure x
transElse :: Else -> Result
transElse x = case x of
  Els block -> failure x
transElseif :: Elseif -> Result
transElseif x = case x of
  ElseIf boolexp block -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ExprssI integer -> failure x
  ExprssD double -> failure x
  ExprssVar namevar -> failure x
  ExprssOp exp1 operator exp2 -> failure x
transBoolExp :: BoolExp -> Result
transBoolExp x = case x of
  ExpB exp -> failure x
  ExpB1 tbool -> failure x
  ExpB2 exp1 boolop exp2 -> failure x
  ExpB3 exp boolop tbool -> failure x
transTBool :: TBool -> Result
transTBool x = case x of
  VTrue -> failure x
  VFalse -> failure x
transElement :: Element -> Result
transElement x = case x of
  ElementSingleI integer -> failure x
  ElementSingleD double -> failure x
  ElementSingleS string -> failure x
transValue :: Value -> Result
transValue x = case x of
  ValS string -> failure x
  ValLS longstrings -> failure x
  ValI integer -> failure x
  ValD double -> failure x
  ValB tbool -> failure x
  ValTab table -> failure x

