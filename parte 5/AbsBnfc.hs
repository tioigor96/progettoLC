-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsBnfc where

newtype DivStm = DivStm String
  deriving (Eq, Ord, Show, Read)

newtype NameVar = NameVar String
  deriving (Eq, Ord, Show, Read)

newtype BoolOp = BoolOp String
  deriving (Eq, Ord, Show, Read)

newtype Operator = Operator String
  deriving (Eq, Ord, Show, Read)

newtype LongStrings = LongStrings String
  deriving (Eq, Ord, Show, Read)

newtype Table = Table String
  deriving (Eq, Ord, Show, Read)

data Program = Prog Block
  deriving (Eq, Ord, Show, Read)

data Block
    = Blk [Statement] | BlkDiv [Statement] DivStm [Statement]
  deriving (Eq, Ord, Show, Read)

data Statement
    = Stm NameVar Value
    | StmArr NameVar [Element]
    | StmTab NameVar Integer Value
    | StmExp NameVar Exp
    | StmWhile While
    | StmRepeat Repeat
    | StmIf If
  deriving (Eq, Ord, Show, Read)

data While = LoopW BoolExp Block
  deriving (Eq, Ord, Show, Read)

data Repeat = LoopR Block BoolExp
  deriving (Eq, Ord, Show, Read)

data If = LoopIf BoolExp Block [Elseif] [Else]
  deriving (Eq, Ord, Show, Read)

data Else = Els Block
  deriving (Eq, Ord, Show, Read)

data Elseif = ElseIf BoolExp Block
  deriving (Eq, Ord, Show, Read)

data Exp
    = ExprssI Integer
    | ExprssD Double
    | ExprssVar NameVar
    | ExprssOp Exp Operator Exp
  deriving (Eq, Ord, Show, Read)

data BoolExp
    = ExpB Exp
    | ExpB1 TBool
    | ExpB2 Exp BoolOp Exp
    | ExpB3 Exp BoolOp TBool
  deriving (Eq, Ord, Show, Read)

data TBool = VTrue | VFalse
  deriving (Eq, Ord, Show, Read)

data Element
    = ElementSingleI Integer
    | ElementSingleD Double
    | ElementSingleS String
  deriving (Eq, Ord, Show, Read)

data Value
    = ValS String
    | ValLS LongStrings
    | ValI Integer
    | ValD Double
    | ValB TBool
    | ValTab Table
  deriving (Eq, Ord, Show, Read)

