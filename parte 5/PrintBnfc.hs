{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintBnfc.
--   Generated by the BNF converter.

module PrintBnfc where

import qualified AbsBnfc
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsBnfc.DivStm where
  prt _ (AbsBnfc.DivStm i) = doc (showString i)

instance Print AbsBnfc.NameVar where
  prt _ (AbsBnfc.NameVar i) = doc (showString i)

instance Print AbsBnfc.BoolOp where
  prt _ (AbsBnfc.BoolOp i) = doc (showString i)

instance Print AbsBnfc.Operator where
  prt _ (AbsBnfc.Operator i) = doc (showString i)

instance Print AbsBnfc.LongStrings where
  prt _ (AbsBnfc.LongStrings i) = doc (showString i)

instance Print AbsBnfc.Table where
  prt _ (AbsBnfc.Table i) = doc (showString i)

instance Print AbsBnfc.Program where
  prt i e = case e of
    AbsBnfc.Prog block -> prPrec i 0 (concatD [prt 0 block])

instance Print AbsBnfc.Block where
  prt i e = case e of
    AbsBnfc.Blk statements -> prPrec i 0 (concatD [prt 0 statements])
    AbsBnfc.BlkDiv statements1 divstm statements2 -> prPrec i 0 (concatD [prt 0 statements1, prt 0 divstm, prt 0 statements2])

instance Print [AbsBnfc.Statement] where
  prt = prtList

instance Print AbsBnfc.Statement where
  prt i e = case e of
    AbsBnfc.Stm namevar value -> prPrec i 0 (concatD [prt 0 namevar, doc (showString "="), prt 0 value])
    AbsBnfc.StmArr namevar elements -> prPrec i 0 (concatD [prt 0 namevar, doc (showString "="), doc (showString "{"), prt 0 elements, doc (showString "}")])
    AbsBnfc.StmTab namevar n value -> prPrec i 0 (concatD [prt 0 namevar, doc (showString "["), prt 0 n, doc (showString "]"), doc (showString "="), prt 0 value])
    AbsBnfc.StmExp namevar exp -> prPrec i 0 (concatD [prt 0 namevar, doc (showString "="), prt 0 exp])
    AbsBnfc.StmWhile while -> prPrec i 0 (concatD [prt 0 while])
    AbsBnfc.StmRepeat repeat -> prPrec i 0 (concatD [prt 0 repeat])
    AbsBnfc.StmIf if_ -> prPrec i 0 (concatD [prt 0 if_])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsBnfc.While where
  prt i e = case e of
    AbsBnfc.LoopW boolexp block -> prPrec i 0 (concatD [doc (showString "while"), prt 0 boolexp, doc (showString "do"), prt 0 block, doc (showString "end")])

instance Print AbsBnfc.Repeat where
  prt i e = case e of
    AbsBnfc.LoopR block boolexp -> prPrec i 0 (concatD [doc (showString "repeat"), prt 0 block, doc (showString "until"), prt 0 boolexp])

instance Print AbsBnfc.If where
  prt i e = case e of
    AbsBnfc.LoopIf boolexp block elseifs elses -> prPrec i 0 (concatD [doc (showString "if"), prt 0 boolexp, doc (showString "then"), prt 0 block, prt 0 elseifs, prt 0 elses, doc (showString "end")])

instance Print AbsBnfc.Else where
  prt i e = case e of
    AbsBnfc.Els block -> prPrec i 0 (concatD [doc (showString "else"), prt 0 block])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsBnfc.Elseif where
  prt i e = case e of
    AbsBnfc.ElseIf boolexp block -> prPrec i 0 (concatD [doc (showString "elseif"), prt 0 boolexp, doc (showString "then"), prt 0 block])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsBnfc.Elseif] where
  prt = prtList

instance Print [AbsBnfc.Else] where
  prt = prtList

instance Print AbsBnfc.Exp where
  prt i e = case e of
    AbsBnfc.ExprssI n -> prPrec i 0 (concatD [prt 0 n])
    AbsBnfc.ExprssD d -> prPrec i 0 (concatD [prt 0 d])
    AbsBnfc.ExprssVar namevar -> prPrec i 0 (concatD [prt 0 namevar])
    AbsBnfc.ExprssOp exp1 operator exp2 -> prPrec i 0 (concatD [prt 0 exp1, prt 0 operator, prt 0 exp2])

instance Print AbsBnfc.BoolExp where
  prt i e = case e of
    AbsBnfc.ExpB exp -> prPrec i 0 (concatD [prt 0 exp])
    AbsBnfc.ExpB1 tbool -> prPrec i 0 (concatD [prt 0 tbool])
    AbsBnfc.ExpB2 exp1 boolop exp2 -> prPrec i 0 (concatD [prt 0 exp1, prt 0 boolop, prt 0 exp2])
    AbsBnfc.ExpB3 exp boolop tbool -> prPrec i 0 (concatD [prt 0 exp, prt 0 boolop, prt 0 tbool])

instance Print AbsBnfc.TBool where
  prt i e = case e of
    AbsBnfc.VTrue -> prPrec i 0 (concatD [doc (showString "true")])
    AbsBnfc.VFalse -> prPrec i 0 (concatD [doc (showString "false")])

instance Print [AbsBnfc.Element] where
  prt = prtList

instance Print AbsBnfc.Element where
  prt i e = case e of
    AbsBnfc.ElementSingleI n -> prPrec i 0 (concatD [prt 0 n])
    AbsBnfc.ElementSingleD d -> prPrec i 0 (concatD [prt 0 d])
    AbsBnfc.ElementSingleS str -> prPrec i 0 (concatD [prt 0 str])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsBnfc.Value where
  prt i e = case e of
    AbsBnfc.ValS str -> prPrec i 0 (concatD [prt 0 str])
    AbsBnfc.ValLS longstrings -> prPrec i 0 (concatD [prt 0 longstrings])
    AbsBnfc.ValI n -> prPrec i 0 (concatD [prt 0 n])
    AbsBnfc.ValD d -> prPrec i 0 (concatD [prt 0 d])
    AbsBnfc.ValB tbool -> prPrec i 0 (concatD [prt 0 tbool])
    AbsBnfc.ValTab table -> prPrec i 0 (concatD [prt 0 table])

