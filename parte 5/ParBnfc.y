-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParBnfc where
import AbsBnfc
import LexBnfc
import ErrM

}

%name pProgram Program
%name pBlock Block
%name pListStatement ListStatement
%name pStatement Statement
%name pWhile While
%name pRepeat Repeat
%name pIf If
%name pElse Else
%name pElseif Elseif
%name pListElseif ListElseif
%name pListElse ListElse
%name pExp Exp
%name pBoolExp BoolExp
%name pTBool TBool
%name pListElement ListElement
%name pElement Element
%name pValue Value
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  ',' { PT _ (TS _ 1) }
  '=' { PT _ (TS _ 2) }
  '[' { PT _ (TS _ 3) }
  ']' { PT _ (TS _ 4) }
  'do' { PT _ (TS _ 5) }
  'else' { PT _ (TS _ 6) }
  'elseif' { PT _ (TS _ 7) }
  'end' { PT _ (TS _ 8) }
  'false' { PT _ (TS _ 9) }
  'if' { PT _ (TS _ 10) }
  'repeat' { PT _ (TS _ 11) }
  'then' { PT _ (TS _ 12) }
  'true' { PT _ (TS _ 13) }
  'until' { PT _ (TS _ 14) }
  'while' { PT _ (TS _ 15) }
  '{' { PT _ (TS _ 16) }
  '}' { PT _ (TS _ 17) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_quoted { PT _ (TL $$) }
  L_DivStm { PT _ (T_DivStm $$) }
  L_NameVar { PT _ (T_NameVar $$) }
  L_BoolOp { PT _ (T_BoolOp $$) }
  L_Operator { PT _ (T_Operator $$) }
  L_LongStrings { PT _ (T_LongStrings $$) }
  L_Table { PT _ (T_Table $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ( $1)) :: Double }

String  :: { String }
String   : L_quoted {  $1 }

DivStm :: { DivStm}
DivStm  : L_DivStm { DivStm ($1)}

NameVar :: { NameVar}
NameVar  : L_NameVar { NameVar ($1)}

BoolOp :: { BoolOp}
BoolOp  : L_BoolOp { BoolOp ($1)}

Operator :: { Operator}
Operator  : L_Operator { Operator ($1)}

LongStrings :: { LongStrings}
LongStrings  : L_LongStrings { LongStrings ($1)}

Table :: { Table}
Table  : L_Table { Table ($1)}

Program :: { Program }
Program : Block { AbsBnfc.Prog $1 }
Block :: { Block }
Block : ListStatement { AbsBnfc.Blk (reverse $1) }
      | ListStatement DivStm ListStatement { AbsBnfc.BlkDiv (reverse $1) $2 (reverse $3) }
ListStatement :: { [Statement] }
ListStatement : {- empty -} { [] }
              | ListStatement Statement { flip (:) $1 $2 }
Statement :: { Statement }
Statement : NameVar '=' Value { AbsBnfc.Stm $1 $3 }
          | NameVar '=' '{' ListElement '}' { AbsBnfc.StmArr $1 $4 }
          | NameVar '[' Integer ']' '=' Value { AbsBnfc.StmTab $1 $3 $6 }
          | NameVar '=' Exp { AbsBnfc.StmExp $1 $3 }
          | While { AbsBnfc.StmWhile $1 }
          | Repeat { AbsBnfc.StmRepeat $1 }
          | If { AbsBnfc.StmIf $1 }
While :: { While }
While : 'while' BoolExp 'do' Block 'end' { AbsBnfc.LoopW $2 $4 }
Repeat :: { Repeat }
Repeat : 'repeat' Block 'until' BoolExp { AbsBnfc.LoopR $2 $4 }
If :: { If }
If : 'if' BoolExp 'then' Block ListElseif ListElse 'end' { AbsBnfc.LoopIf $2 $4 (reverse $5) (reverse $6) }
Else :: { Else }
Else : 'else' Block { AbsBnfc.Els $2 }
Elseif :: { Elseif }
Elseif : 'elseif' BoolExp 'then' Block { AbsBnfc.ElseIf $2 $4 }
ListElseif :: { [Elseif] }
ListElseif : {- empty -} { [] }
           | ListElseif Elseif { flip (:) $1 $2 }
ListElse :: { [Else] }
ListElse : {- empty -} { [] } | ListElse Else { flip (:) $1 $2 }
Exp :: { Exp }
Exp : Integer { AbsBnfc.ExprssI $1 }
    | Double { AbsBnfc.ExprssD $1 }
    | NameVar { AbsBnfc.ExprssVar $1 }
    | Exp Operator Exp { AbsBnfc.ExprssOp $1 $2 $3 }
BoolExp :: { BoolExp }
BoolExp : Exp { AbsBnfc.ExpB $1 }
        | TBool { AbsBnfc.ExpB1 $1 }
        | Exp BoolOp Exp { AbsBnfc.ExpB2 $1 $2 $3 }
        | Exp BoolOp TBool { AbsBnfc.ExpB3 $1 $2 $3 }
TBool :: { TBool }
TBool : 'true' { AbsBnfc.VTrue } | 'false' { AbsBnfc.VFalse }
ListElement :: { [Element] }
ListElement : {- empty -} { [] }
            | Element { (:[]) $1 }
            | Element ',' ListElement { (:) $1 $3 }
Element :: { Element }
Element : Integer { AbsBnfc.ElementSingleI $1 }
        | Double { AbsBnfc.ElementSingleD $1 }
        | String { AbsBnfc.ElementSingleS $1 }
Value :: { Value }
Value : String { AbsBnfc.ValS $1 }
      | LongStrings { AbsBnfc.ValLS $1 }
      | Integer { AbsBnfc.ValI $1 }
      | Double { AbsBnfc.ValD $1 }
      | TBool { AbsBnfc.ValB $1 }
      | Table { AbsBnfc.ValTab $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

