/* -*- c -*- This FLex file was machine-generated by the BNF converter */
%option noyywrap
%{
#define yylval bnf1lval
#define YY_BUFFER_APPEND bnf1_BUFFER_APPEND
#define YY_BUFFER_RESET bnf1_BUFFER_RESET
#define initialize_lexer bnf1_initialize_lexer
#include <string.h>
#include "Parser.h"
#include "env.h"
#define YY_BUFFER_LENGTH 4096
extern int yy_mylinenumber ;
char YY_PARSED_STRING[YY_BUFFER_LENGTH];
void YY_BUFFER_APPEND(char *s)
{
  strcat(YY_PARSED_STRING, s); //Do something better here!
}
void YY_BUFFER_RESET(void)
{
  int x;
  for(x = 0; x < YY_BUFFER_LENGTH; x++)
    YY_PARSED_STRING[x] = 0;
}

int depth = 0;

%}

%x EXITALL

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL COMMENT CHAR CHARESC CHAREND STRING ESCAPED
%%

<YYINITIAL>"<"      	 {return _SYMB_0;}
<YYINITIAL>">"      	 {return _SYMB_1;}
<YYINITIAL>"</"      	 {return _SYMB_2;}
<YYINITIAL>"="      	 {return _SYMB_3;}
<YYINITIAL>"false"      	{return _SYMB_4;}
<YYINITIAL>"field"      	 {return _SYMB_5;}
<YYINITIAL>"import"      	 {return _SYMB_6;}
<YYINITIAL>"name"      	 {return _SYMB_7;}
<YYINITIAL>"section"      	 {return _SYMB_8;}
<YYINITIAL>"true"      	 {return _SYMB_9;}

<YYINITIAL>\${LETTER}({LETTER}|{DIGIT}|\_)*     	{yylval.string_ = strdup(yytext); return _SYMB_10;}
<YYINITIAL>\${LETTER}({LETTER}|{DIGIT}|\_)*\.{LETTER}({LETTER}|{DIGIT}|\_)*     	{yylval.string_ = strdup(yytext); return _SYMB_11;}
<YYINITIAL>\#[^\n]*\n     	 {yylval.string_ = strdup(yytext); return _SYMB_12;}
<YYINITIAL>{LETTER}{IDENT}*      	 {yylval.string_ = strdup(yytext); return _IDENT_;}
<YYINITIAL>(\/|\.)+(({LETTER}|{DIGIT}|\-|\_|\.)+(\.\.\/|\/)*)+ {
    	yylval.string_ = strdup(yytext);
    	FILE *f=fopen(yylval.string_,"r");
    	if(!f){
    	   fprintf(stderr,"File %s not exist! Abort.\n",yytext);
    	   yyterminate();
    	}
    	
    	yypush_buffer_state(yy_create_buffer( f, YY_BUF_SIZE ));
    	depth++;
    	
    	BEGIN YYINITIAL;
    	return _SYMB_13;
    }
<YYINITIAL>"\""      	 BEGIN STRING;
<STRING>\\      	 BEGIN ESCAPED;
<STRING>\"      	 {yylval.string_ = strdup(YY_PARSED_STRING); YY_BUFFER_RESET(); BEGIN YYINITIAL; return _STRING_;}
<STRING>.      	     YY_BUFFER_APPEND(yytext);
<ESCAPED>n      	 YY_BUFFER_APPEND("\n"); BEGIN STRING;
<ESCAPED>\"      	 YY_BUFFER_APPEND("\""); BEGIN STRING ;
<ESCAPED>\\      	 YY_BUFFER_APPEND("\\"); BEGIN STRING;
<ESCAPED>t       	 YY_BUFFER_APPEND("\t"); BEGIN STRING;
<ESCAPED>.       	 YY_BUFFER_APPEND(yytext); BEGIN STRING;
<YYINITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)?      	 {yylval.double_ = atof(yytext); return _DOUBLE_;}
<YYINITIAL>{DIGIT}+      	 {yylval.int_ = atoi(yytext); return _INTEGER_;}

\n ++yy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 {return _ERROR_;}

<YYINITIAL><<EOF>>     {
                
                if(depth>0){
                    yypop_buffer_state();
                    depth--;
                    //return FEOF;
                } else {
                    BEGIN EXITALL;
                }
                return FEOF;
               
                
            }

<EXITALL><<EOF>>    yyterminate(); //return EOF;

%%
void initialize_lexer(FILE *inp) { yyrestart(inp); BEGIN YYINITIAL; }































